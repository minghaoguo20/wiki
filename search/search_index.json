{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to My Wiki","text":"<p>This repo is constructed as my notebook.</p> <ul> <li> <p>terminology </p> </li> <li> <p>wiki- GitHub</p> </li> <li>my homepage</li> <li>ml course</li> </ul>"},{"location":"cv/nerf/","title":"nerf","text":""},{"location":"cv/nerf/#nerf","title":"NeRF","text":"<p>NeRF Medium</p> <p>NeRFs \u4f9d\u8d56\u4e8e\u4e00\u79cd\u53e4\u8001\u800c\u4f18\u96c5\u7684\u6982\u5ff5\uff0c\u79f0\u4e3a\u5149\u573a\u6216\u8f90\u5c04\u573a\u3002</p> <p>\u5149\u573a\u662f\u63cf\u8ff0\u5149\u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u4f20\u8f93\u7684\u51fd\u6570\u3002\u5b83\u63cf\u8ff0\u4e86\u5149\u7ebf\u5728\u7a7a\u95f4\u4e2d\u6bcf\u4e2a x=(x, y, z) \u5750\u6807\u548c\u6bcf\u4e2a\u65b9\u5411 d \u4e2d\u79fb\u52a8\u7684\u65b9\u5411\uff0c\u53ef\u4ee5\u7528 \u03b8 \u548c \u03d5 \u89d2\u5ea6\u6216\u5355\u4f4d\u5411\u91cf\u6765\u63cf\u8ff0\u3002\u5b83\u4eec\u5171\u540c\u5f62\u6210\u4e86\u4e00\u4e2a 5D \u7279\u5f81\u7a7a\u95f4\uff0c\u63cf\u8ff0\u4e86 3D \u573a\u666f\u4e2d\u7684\u5149\u4f20\u8f93\u3002</p> <p>\u53d7\u5230\u8fd9\u79cd\u8868\u793a\u7684\u542f\u53d1\uff0cNeRF \u5c1d\u8bd5\u8fd1\u4f3c\u4e00\u4e2a\u51fd\u6570\uff0c\u5c06\u8fd9\u4e2a\u7a7a\u95f4\u6620\u5c04\u5230\u7531\u989c\u8272 c=(R,G,B) \u548c\u5bc6\u5ea6 \u03c3 \u7ec4\u6210\u7684 4D \u7a7a\u95f4\uff0c\u60a8\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\u5728\u8fd9\u4e2a 5D \u5750\u6807\u7a7a\u95f4\u4e2d\u5149\u7ebf\u88ab\u7ec8\u6b62\u7684\u53ef\u80fd\u6027\uff08\u4f8b\u5982\u88ab\u906e\u6321\uff09\u7684\u4f3c\u7136\u5ea6\u3002</p> <p>\u56e0\u6b64\uff0c\u6807\u51c6\u7684 NeRF \u662f\u4e00\u4e2a\u5f62\u5f0f\u4e3a $F:(x,d) -&gt; (c,\u03c3)$ \u7684\u51fd\u6570\u3002</p> <p></p> <p></p> <p>\u767d\u8a71Neural Radiance Fields (NeRF): \u985e\u795e\u7d93\u7db2\u8def\u5728View Synthesis\u7684\u71b1\u9580\u65b0\u65b9\u5411</p>"},{"location":"cv/sd/","title":"Sd","text":""},{"location":"cv/sd/#fid-score-clip-score","title":"FID score &amp; CLIP score","text":"<p>FID (Fr\u00e9chet Inception Distance) medium</p> <p>FID is a performance metric that calculates the distance between the feature vectors of real images and the feature vectors of fake images(Generated by the generator). The lower FID score represents that the quality of images generated by the generator is higher and similar to the real ones. FID is based on the feature vectors of images. If you are using FID as your performance metric then try to minimize it.</p> <p>FID\u662f\u4e00\u79cd\u6027\u80fd\u6307\u6807\uff0c\u5b83\u8ba1\u7b97\u771f\u5b9e\u56fe\u50cf\u7684\u7279\u5f81\u5411\u91cf\u4e0e\u865a\u5047\u56fe\u50cf\uff08\u7531\u751f\u6210\u5668\u751f\u6210\uff09\u7684\u7279\u5f81\u5411\u91cf\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u8f83\u4f4e\u7684FID\u5206\u6570\u8868\u793a\u751f\u6210\u5668\u751f\u6210\u7684\u56fe\u50cf\u8d28\u91cf\u66f4\u9ad8\u4e14\u7c7b\u4f3c\u4e8e\u771f\u5b9e\u56fe\u50cf\u3002FID\u57fa\u4e8e\u56fe\u50cf\u7684\u7279\u5f81\u5411\u91cf\u3002\u5982\u679c\u60a8\u5c06FID\u7528\u4f5c\u6027\u80fd\u6307\u6807\uff0c\u5219\u5e94\u5c1d\u8bd5\u5c06\u5176\u6700\u5c0f\u5316\u3002</p> <p></p> <p>CLIP score vs FID pareto curves</p> <p>CLIP is a multimodal model that can be used to measure how well a pair image/caption match.</p> <p>CLIP\u662f\u4e00\u79cd\u591a\u6a21\u6001\u6a21\u578b\uff0c\u53ef\u7528\u4e8e\u8861\u91cf\u56fe\u50cf/\u6807\u9898\u914d\u5bf9\u7684\u5339\u914d\u7a0b\u5ea6\u3002</p> <p>It let us evaluate the quality of our generations in term of prompt matching.</p> <p>\u5b83\u8ba9\u6211\u4eec\u80fd\u591f\u8bc4\u4f30\u6211\u4eec\u7684\u4ee3\u9645\u5728\u53ca\u65f6\u5339\u914d\u65b9\u9762\u7684\u8d28\u91cf\u3002</p> <p>FID\u8d8a\u5c0f\uff0cCLIP\u8d8a\u5927 -&gt; \u6548\u679c\u8d8a\u597d</p>"},{"location":"macos/gpu/","title":"gpu","text":""},{"location":"macos/gpu/#mps","title":"mps","text":"<p>use gpu in m chips</p> <pre><code>def get_default_device():\n    \"\"\"\n    get the default device for training.\n    if using mac with M chips, return 'mps'\n    if using cuda, return 'cuda'\n    if using cpu, return 'cpu'\n    \"\"\"\n    if torch.cuda.is_available():\n        return 'cuda'\n    elif getattr(torch.backends, 'mps', None) is not None and torch.backends .mps.is_available():\n        return 'mps' \n    else:\n        return 'cpu'\n</code></pre>"},{"location":"misc/direction/","title":"direction","text":""},{"location":"misc/direction/#aigc","title":"AIGC\u5206\u4eab\u4f1a","text":"<p>\u6e05\u534e\u6821\u53cb\u5185\u90e8AIGC\u5206\u4eab\u4f1a_\u54d4\u54e9\u54d4\u54e9_bilibili</p>"},{"location":"misc/direction/#_1","title":"\u662f\u4ec0\u4e48","text":"<p>\u72ed\u4e49AIGC</p> <ul> <li>\u5bf9\u8bdd\u673a\u5668\u4eba</li> <li>AI\u7ed8\u753b</li> </ul> <p>\u5e7f\u4e49AIGC: AIGeneratedContent</p> <ul> <li>ai\u52a8\u4f5c\u6355\u6349\uff1a\u6355\u6349\u4eba\u4f53\u7684\u9aa8\u9abc\uff0c\u505a\u6620\u5c04</li> <li>\u6e38\u620f\u4eba\u673a</li> <li>\u4e09\u7ef4\u91cd\u5efa</li> <li> <p>AI\u97f3\u6548</p> </li> <li> <p>PGC: Professionally Generated Content</p> </li> <li>UGC: User Generated Content</li> <li>AIGC: Artificial Intelligence Generated Content</li> <li>PGC\u4e0eUGC\u4e92\u76f8\u8865\u5145\uff0cAIGC\u53ea\u662fPGC\u4e0eUGC\u7684\u8f85\u52a9\u5de5\u5177</li> <li>PGC: \u8282\u7701\u4eba\u529b</li> <li>UGC: \u5feb\u901f\u4e0a\u624b</li> <li>\u76ee\u524dAIGC\u751f\u4ea7\u7684\u5185\u5bb9\u662f\u4e3a\u4eba\u670d\u52a1\uff0c\u8fd8\u6ca1\u6709\u4e3a\u673a\u5668\u670d\u52a1</li> </ul>"},{"location":"misc/direction/#ai","title":"AI\u89c6\u6548","text":"<p>\u5386\u53f2</p> <p>2012 AlexNet -&gt; 2014 GANs \u751f\u6210\u8bd5\u56fe\u60f3\u7684\u5148\u9a71 -&gt; 2015 \u98ce\u683c\u8fc1\u79fb -&gt; 2018 DALL-E text2img -&gt; 2022 Stable Diffusion\u5f00\u6e90</p> <ul> <li>\u843d\u5730\u7684\u70b9</li> <li>\u7b80\u7b14\u753b\u4e0a\u8272</li> <li>\u8d85\u5206</li> <li>\u6df1\u5ea6\u56fe\u6a21\u62df</li> <li>\u59ff\u6001\u6a21\u62df\uff08\u63d0\u53d6\u9aa8\u9abc\uff0c\u8f93\u51fa\uff09</li> <li>\u8f6e\u5ed3\u6a21\u62df</li> <li>\u6362\u88c5</li> <li>\u670d\u88c5\u8bbe\u8ba1</li> <li>\u539f\u753b\u5e08 - \u540e\u671f\u7ec6\u5316\uff08\u7cbe\u7ec6\u5316\uff0c\u4e0a\u8272\uff09</li> <li>\u591a\u89c6\u89d2\u751f\u6210</li> <li>\u751f\u6210\u5f0f3D\u6a21\u578b\uff08\u6548\u679c\u4e0d\u662f\u7279\u522b\u597d\uff0c\u6ca1\u6709\u843d\u5730\uff09</li> <li>AI\u7ed8\u753b\u8bad\u7ec3\uff08finetune\uff09</li> <li>\u6750\u8d28\u751f\u6210</li> <li>360\u573a\u666f\u751f\u6210</li> <li>\u672a\u6765</li> <li>\u751f\u6210\u89c6\u9891<ul> <li>\u76ee\u524d\u6c34\u5e73\uff1aGen-2(\u6570\u79d2)</li> <li>\u76ee\u524d\u6c34\u5e73\uff1a\u6bcf\u4e00\u5e27\u6548\u679c\u4e0d\u662f\u5f88\u597dNUWA-XL(11min)</li> </ul> </li> <li>AI\u89d2\u8272\uff1a\u7535\u5f71\u884c\u4e1a\uff0c\u4eba-&gt;avatar</li> <li> <p>AI\u52a8\u4f5c\u6355\u6349\uff08\u5355\u6444\u50cf\u673a\uff09</p> </li> <li> <p>SD</p> </li> <li>\u901f\u5ea6 &amp; \u8d28\u91cf</li> <li>latent space<ul> <li>\u7701\u8ba1\u7b97\u8d44\u6e90</li> <li>\u5173\u6ce8\u771f\u6b63\u7684\u91cd\u70b9\uff0c\u5ffd\u7565\u65e0\u5173\u7d27\u8981\u7684\u7ec6\u8282</li> </ul> </li> </ul> <pre><code>graph LR\n\nPrompt --&gt; token --&gt; encoder\nencoder --text semantic vector 1,77,768--&gt; unet\nsample[sample 1,4,64,64 ] --&gt; unet[UNet] --&gt; decoder[VAE decoder] --&gt; img[img 1,3,512,512]\n</code></pre>"},{"location":"misc/direction/#ai_1","title":"AI\u5bf9\u8bdd","text":"<p>2011 siri --&gt; 2017 transformer --&gt; 2018 google duplex --&gt; 2018 bert, gpt1,2 \u9884\u8bad\u7ec3\u5fae\u8c03\u6a21\u578b\u6982\u5ff5\u63d0\u51fa  --&gt; chatgpt, gpt4</p> <ul> <li>github copilot </li> <li>office365 copilot </li> <li>auto GPT</li> <li> <p>notion AI</p> </li> <li> <p>GPT-1: \u9884\u8bad\u7ec3+\u5fae\u8c03</p> </li> <li>GPT-2: \u9884\u8bad\u7ec3+Zero Shot</li> <li>GPT-3: \u9884\u8bad\u7ec3+prompt tuning</li> <li>ChatGPT: \u9884\u8bad\u7ec3+RLHF</li> </ul> model #layers #word vector len #para #data pretrained GPT-1 12 768 0.117B 5GB GPT-2 48 1600 1.5B 40GB GPT-3 96 12888 175B 45TB <p>RLHF(Reinforcement Learning from Human Feedback)</p> <p>\u8bad\u7ec3\u4e00\u4e2arobot B\uff0c\u8d1f\u8d23\u6253\u5206\uff08\u4eba\u7c7b\u6253\u5206\u592a\u6162\uff0c\u4e0d\u73b0\u5b9e\uff0c\u7528\u673a\u5668\u4eba\u6253\u5206\uff09</p> <p>\u8d1d\u53f6\u65af\u9519\u8bef\u7387\uff1a\u7406\u8bba\u4e0aAI\u80fd\u8fbe\u5230\u7684\u6700\u5c0f\u8bef\u5dee\u7387</p> \u4f20\u7edf\u5de5\u4e1aAI\u9879\u76ee\uff08\u76d1\u7763\u5b66\u671f\uff09 \u8d1d\u53f6\u65af\u9519\u8bef\u7387\uff5e\u4eba\u7c7b\u8bef\u5dee \u8bf4\u5565\u505a\u5565 AlphaGO(\u5f3a\u5316\u5b66\u671f) \u7279\u5b9a\u7ec6\u5206\u9886\u57df&lt;\u4eba\u7c7b\u8bef\u5dee \u81ea\u6211\u8fdb\u5316 GPT \u591a\u9886\u57df\uff0c\u7279\u5b9a\u7ec6\u5206\u9886\u57df&lt;\u4eba\u7c7b\u8bef\u5dee \u8de8\u5b66\u79d1"},{"location":"misc/direction/#aigc_1","title":"AIGC\u5728\u6e38\u620f\u9886\u57df","text":"<p>\u6e38\u620f\u662f\u4e00\u4e2a\u5185\u5bb9\u8f7d\u4f53\uff0c\u5e7f\u4e49\u4e3a\u4e92\u52a8\u5a92\u4f53</p> <p>\u6e38\u620f\u662f\u591a\u79cd\u6280\u672f\u7684\u50ac\u5316\u5242\u548c\u7b2c\u4e00\u5b9e\u9a8c\u7a7a\u95f4</p> <ul> <li>\u6e38\u620f\u9886\u57df\u5e94\u7528</li> <li>\u6e38\u620f\u7b56\u5212</li> <li>\u6e38\u620f\u7f8e\u672f</li> <li>\u6e38\u620f\u7a0b\u5e8f</li> </ul> <p>GPT4\u667a\u80fd\u8bc6\u56fe</p>"},{"location":"misc/direction/#_2","title":"\u80fd\u529b\u8981\u6c42","text":"<ul> <li>\u4fe1\u606f\u65f6\u4ee3</li> <li>\u5de5\u4f5c\u6838\u5fc3\u80fd\u529b\uff1a\u6570\u636e\u6574\u5408</li> <li>\u667a\u80fd\u65f6\u4ee3</li> <li>\u6839\u636e\u7528\u6237\u5b9a\u5236\u5316\u63a8\u8350\uff0c\u4f9d\u9760\u7b97\u6cd5\u81ea\u52a8\u51b3\u7b56\uff1b\u81ea\u7136\u8bed\u8a00\uff0c\u4e0b\u5212\u5c4f\u5e55</li> <li>\u5de5\u4f5c\u6838\u5fc3\u80fd\u529b\uff1a\u521b\u65b0\u80fd\u529b</li> <li>\u6570\u5b57\u5316\uff08\u6570\u5b57\u5316\u8f6c\u578b\uff0c\u5143\u5b87\u5b99\uff09</li> </ul>"},{"location":"misc/direction/#_3","title":"\u4e0b\u4e00\u6b65\u9884\u6d4b","text":"<ul> <li>AI\u89c6\u6548</li> <li>\u7cbe\u7ec6\u5316\u63a7\u5236\uff0c\u5b9a\u5236\u5316\uff08\u4eba\u7c7b\u7684\u63a7\u5236\u4e0d\u5f3a\uff09</li> <li>AI\u5bf9\u8bdd</li> <li>GPT\u6a21\u578b\u4e0d\u4f1a\u7ee7\u7eed\u6269\u5927</li> <li>ChatGPT\u63d2\u4ef6\u5f00\u53d1\u5e26\u6765\u65b0\u7684\u751f\u6001</li> <li>\u5176\u4ed6</li> <li>\u89c6\u89c9\u5bf9\u8bdd\u7edf\u4e00\uff0c\u64cd\u4f5c\u5404\u79cd\u8f6f\u4ef6</li> <li>\u7535\u5b50\u6e38\u620f\u6700\u5148\u5e94\u7528\u8d77\u6765\uff08\u5b8c\u5168\u6570\u5b57\u5316\uff09</li> <li>OpenAI\u4e0d\u4f1a\u5784\u65ad\u884c\u4e1a</li> </ul>"},{"location":"python/syntax/","title":"syntax","text":""},{"location":"python/syntax/#lambda-functino","title":"lambda functino","text":"<p>lambda - Medium</p> <pre><code># lambda function\nlambda arguments: expression\n</code></pre> <p>example</p> <pre><code>add = lambda x, y: x + y\nresult = add(5, 3)\nprint(result) # 8\n</code></pre>"},{"location":"python/syntax/#using-lambda-functions-with-map","title":"Using Lambda Functions with map","text":"<p>\u4f7f\u7528 Lambda \u51fd\u6570\u4e0e map \u3002</p> <p>The map function is a built-in Python function that takes a function and an iterable as arguments and returns a new iterable with the function applied to each element. For example, to square all the elements of a list of numbers using a lambda function and map, we would write the following code:</p> <p>map \u51fd\u6570\u662f Python \u5185\u7f6e\u51fd\u6570\u4e4b\u4e00\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u51fd\u6570\u548c\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u5e94\u7528\u4e86\u8be5\u51fd\u6570\u3002\u4f8b\u5982\uff0c\u4f7f\u7528 lambda \u51fd\u6570\u548c map \u6765\u5bf9\u6570\u5b57\u5217\u8868\u4e2d\u7684\u6240\u6709\u5143\u7d20\u8fdb\u884c\u5e73\u65b9\uff0c\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u4ee5\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>numbers = [1, 2, 3, 4, 5]\nsquare = list(map(lambda x: x**2, numbers))\nprint(square) # [1, 4, 9, 16, 25]\n</code></pre>"},{"location":"python/syntax/#using-lambda-functions-with-filter","title":"Using Lambda Functions with filter","text":"<p>\u4f7f\u7528 Lambda \u51fd\u6570\u4e0e filter \u3002</p> <p>The filter function is another built-in Python function that takes a function and an iterable as arguments and returns a new iterable with only the elements for which the function returns True. For example, to get a list of even numbers from a list of numbers using a lambda function and filter, we would write the following code:</p> <p>filter \u51fd\u6570\u662f\u53e6\u4e00\u4e2a\u5185\u7f6e\u7684 Python \u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u51fd\u6570\u548c\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u4ec5\u5305\u542b\u51fd\u6570\u8fd4\u56de True \u7684\u5143\u7d20\u7684\u65b0\u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002\u4f8b\u5982\uff0c\u4f7f\u7528 lambda \u51fd\u6570\u548c filter \u4ece\u6570\u5b57\u5217\u8868\u4e2d\u83b7\u53d6\u5076\u6570\u5217\u8868\uff0c\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u4ee5\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>numbers = [1, 2, 3, 4, 5]\nevens = list(filter(lambda x: x % 2 == 0, numbers))\nprint(evens) # [2, 4]\n</code></pre>"},{"location":"python/syntax/#using-lambda-functions-with-reduce","title":"Using Lambda Functions with reduce","text":"<p>\u4f7f\u7528 Lambda \u51fd\u6570\u4e0e reduce \u3002</p> <p>The reduce function is a built-in function from the functools module that takes a function and an iterable as arguments and returns a single value that is the result of applying the function cumulatively to the elements of the iterable. For example, to find the product of all the elements of a list of numbers using a lambda function and reduce, we would write the following code:</p> <p>reduce \u51fd\u6570\u662f functools \u6a21\u5757\u4e2d\u7684\u5185\u7f6e\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u51fd\u6570\u548c\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5355\u4e00\u7684\u503c\uff0c\u8be5\u503c\u662f\u5c06\u51fd\u6570\u7d2f\u79ef\u5e94\u7528\u4e8e\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u5143\u7d20\u7684\u7ed3\u679c\u3002\u4f8b\u5982\uff0c\u4f7f\u7528 lambda \u51fd\u6570\u548c reduce \u67e5\u627e\u6570\u5b57\u5217\u8868\u4e2d\u6240\u6709\u5143\u7d20\u7684\u4e58\u79ef\uff0c\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u4ee5\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>from functools import reduce\n\nnumbers = [1, 2, 3, 4, 5]\nproduct = reduce(lambda x, y: x * y, numbers)\nprint(product) # 120\n</code></pre>"},{"location":"python/syntax/#limitations-of-lambda-functions-lambda","title":"Limitations of Lambda Functions Lambda","text":"<p>\u51fd\u6570\u7684\u9650\u5236</p> <p>While lambda functions are incredibly useful, they do have a few limitations that are important to keep in mind. One of the main limitations of lambda functions is that they can only contain a single expression. This means that they cannot contain statements or multiple lines of code. Additionally, the expression must be a valid expression in Python and must return a value. Another limitation is that lambda functions cannot contain any annotations or type hints.</p> <p>\u867d\u7136 lambda \u51fd\u6570\u975e\u5e38\u6709\u7528\uff0c\u4f46\u5b83\u4eec\u786e\u5b9e\u6709\u4e00\u4e9b\u9650\u5236\u9700\u8981\u7262\u8bb0\u3002lambda \u51fd\u6570\u7684\u4e3b\u8981\u9650\u5236\u4e4b\u4e00\u662f 1. \u5b83\u4eec\u53ea\u80fd\u5305\u542b\u5355\u4e2a\u8868\u8fbe\u5f0f\u3002\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u4e0d\u80fd\u5305\u542b\u8bed\u53e5\u6216\u591a\u884c\u4ee3\u7801\u3002 2. \u8868\u8fbe\u5f0f\u5fc5\u987b\u662f Python \u4e2d\u7684\u6709\u6548\u8868\u8fbe\u5f0f\uff0c\u5e76\u4e14\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u503c\u3002 3. \u53e6\u4e00\u4e2a\u9650\u5236\u662f lambda \u51fd\u6570\u4e0d\u80fd\u5305\u542b\u4efb\u4f55\u6ce8\u91ca\u6216\u7c7b\u578b\u63d0\u793a\u3002</p>"},{"location":"python/syntax/#enumerate","title":"Enumerate","text":"<p>Enumerate Medium</p> <pre><code>for i, layer in enumerate(self.layers):\n    x = self.act(layer(x))\n    if i in self.skip:\n        x = torch.cat([x, x_input], dim=-1)\n</code></pre>"},{"location":"python/syntax/#_1","title":"... \u4e09\u4e2a\u70b9\u7684\u7701\u7565\u53f7","text":"<p>... zhihu</p> <ol> <li>\u7b49\u540c\u4e8e<code>pass</code></li> <li>Numpy\u4e2d\u53ef\u4ee5\u7528\u6765\u9009\u6570\u636e</li> </ol>"},{"location":"python/syntax/#decorator","title":"decorator","text":"<p>\u3010Python\u5c0f\u6280\u5de7\uff1a\u88c5\u9970\u5668(Decorator)\u3011</p> <pre><code>import time\n\ndef display_time( func) :\n    def wrapper (*args):\n        t1 = time. time()\n        result = func(*args)\n        t2 = time.time()\n        print (\"Total time: {:.4} s\". format (t2 - t1))\n        return result \n    return wrapper\n\ndef is_prime (num):\n    if num &lt; 2:\n        return False \n    elif num == 2:\n        return True else:\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n        else:\n            return True\n\n@display_time\ndef count_prime_nums (maxnum) :\n    count = 0\n    for i in range(2, maxnum) :\n        if is_prime(i):\n            count = count + 1\n    return count\n\ncount = count_prime_nums (10000)\nprint (count)\n\n</code></pre>"},{"location":"useful_cmd/terminology/","title":"prompt","text":""},{"location":"useful_cmd/terminology/#explanation","title":"explanation","text":"<p>{stable diffusion}\u4e2d\u7684{VQModel}\u662f\u4ec0\u4e48\uff1f</p> <p>\u7528\u5730\u9053\u7684\u4e2d\u6587\u89e3\u91ca\u4ee5\u4e0b\u4ee3\u7801\uff1a {code}</p>"},{"location":"useful_cmd/terminology/#translation","title":"translation","text":"<p>\u7ffb\u8bd1\u6210\u5730\u9053\u7684\u4e2d\u6587\uff1a {context}</p> <p>Translate into English: {context}</p>"},{"location":"useful_cmd/toefl/","title":"prompt","text":"<p>\u4f5c\u4e3a\u4e00\u4e2a\u6258\u798f\u5199\u4f5c\u8001\u5e08\uff0c\u7528fluent English\u4e3a\u4ee5\u4e0b\u9898\u76ee\u5199\u4e00\u7bc7\u5927\u7ea6400 words\u957f\u5ea6\u7684\u8303\u6587\uff1a {{topic}}</p>"}]}