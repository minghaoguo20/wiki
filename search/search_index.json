{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to My Wiki","text":"<p>This repo is constructed as my notebook.</p>"},{"location":"cv/nerf/","title":"nerf","text":""},{"location":"cv/nerf/#nerf","title":"NeRF","text":"<p>NeRF Medium</p> <p>NeRFs \u4f9d\u8d56\u4e8e\u4e00\u79cd\u53e4\u8001\u800c\u4f18\u96c5\u7684\u6982\u5ff5\uff0c\u79f0\u4e3a\u5149\u573a\u6216\u8f90\u5c04\u573a\u3002</p> <p>\u5149\u573a\u662f\u63cf\u8ff0\u5149\u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u4f20\u8f93\u7684\u51fd\u6570\u3002\u5b83\u63cf\u8ff0\u4e86\u5149\u7ebf\u5728\u7a7a\u95f4\u4e2d\u6bcf\u4e2a x=(x, y, z) \u5750\u6807\u548c\u6bcf\u4e2a\u65b9\u5411 d \u4e2d\u79fb\u52a8\u7684\u65b9\u5411\uff0c\u53ef\u4ee5\u7528 \u03b8 \u548c \u03d5 \u89d2\u5ea6\u6216\u5355\u4f4d\u5411\u91cf\u6765\u63cf\u8ff0\u3002\u5b83\u4eec\u5171\u540c\u5f62\u6210\u4e86\u4e00\u4e2a 5D \u7279\u5f81\u7a7a\u95f4\uff0c\u63cf\u8ff0\u4e86 3D \u573a\u666f\u4e2d\u7684\u5149\u4f20\u8f93\u3002</p> <p>\u53d7\u5230\u8fd9\u79cd\u8868\u793a\u7684\u542f\u53d1\uff0cNeRF \u5c1d\u8bd5\u8fd1\u4f3c\u4e00\u4e2a\u51fd\u6570\uff0c\u5c06\u8fd9\u4e2a\u7a7a\u95f4\u6620\u5c04\u5230\u7531\u989c\u8272 c=(R,G,B) \u548c\u5bc6\u5ea6 \u03c3 \u7ec4\u6210\u7684 4D \u7a7a\u95f4\uff0c\u60a8\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\u5728\u8fd9\u4e2a 5D \u5750\u6807\u7a7a\u95f4\u4e2d\u5149\u7ebf\u88ab\u7ec8\u6b62\u7684\u53ef\u80fd\u6027\uff08\u4f8b\u5982\u88ab\u906e\u6321\uff09\u7684\u4f3c\u7136\u5ea6\u3002</p> <p>\u56e0\u6b64\uff0c\u6807\u51c6\u7684 NeRF \u662f\u4e00\u4e2a\u5f62\u5f0f\u4e3a $F:(x,d) -&gt; (c,\u03c3)$ \u7684\u51fd\u6570\u3002</p>"},{"location":"python/function/","title":"function","text":""},{"location":"python/function/#lambda-functino","title":"lambda functino","text":"<p>lambda - Medium</p> <pre><code># lambda function\nlambda arguments: expression\n</code></pre> <p>example</p> <pre><code>add = lambda x, y: x + y\nresult = add(5, 3)\nprint(result) # 8\n</code></pre>"},{"location":"python/function/#using-lambda-functions-with-map","title":"Using Lambda Functions with map","text":"<p>\u4f7f\u7528 Lambda \u51fd\u6570\u4e0e map \u3002</p> <p>The map function is a built-in Python function that takes a function and an iterable as arguments and returns a new iterable with the function applied to each element. For example, to square all the elements of a list of numbers using a lambda function and map, we would write the following code:</p> <p>map \u51fd\u6570\u662f Python \u5185\u7f6e\u51fd\u6570\u4e4b\u4e00\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u51fd\u6570\u548c\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u5e94\u7528\u4e86\u8be5\u51fd\u6570\u3002\u4f8b\u5982\uff0c\u4f7f\u7528 lambda \u51fd\u6570\u548c map \u6765\u5bf9\u6570\u5b57\u5217\u8868\u4e2d\u7684\u6240\u6709\u5143\u7d20\u8fdb\u884c\u5e73\u65b9\uff0c\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u4ee5\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>numbers = [1, 2, 3, 4, 5]\nsquare = list(map(lambda x: x**2, numbers))\nprint(square) # [1, 4, 9, 16, 25]\n</code></pre>"},{"location":"python/function/#using-lambda-functions-with-filter","title":"Using Lambda Functions with filter","text":"<p>\u4f7f\u7528 Lambda \u51fd\u6570\u4e0e filter \u3002</p> <p>The filter function is another built-in Python function that takes a function and an iterable as arguments and returns a new iterable with only the elements for which the function returns True. For example, to get a list of even numbers from a list of numbers using a lambda function and filter, we would write the following code:</p> <p>filter \u51fd\u6570\u662f\u53e6\u4e00\u4e2a\u5185\u7f6e\u7684 Python \u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u51fd\u6570\u548c\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u4ec5\u5305\u542b\u51fd\u6570\u8fd4\u56de True \u7684\u5143\u7d20\u7684\u65b0\u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002\u4f8b\u5982\uff0c\u4f7f\u7528 lambda \u51fd\u6570\u548c filter \u4ece\u6570\u5b57\u5217\u8868\u4e2d\u83b7\u53d6\u5076\u6570\u5217\u8868\uff0c\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u4ee5\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>numbers = [1, 2, 3, 4, 5]\nevens = list(filter(lambda x: x % 2 == 0, numbers))\nprint(evens) # [2, 4]\n</code></pre>"},{"location":"python/function/#using-lambda-functions-with-reduce","title":"Using Lambda Functions with reduce","text":"<p>\u4f7f\u7528 Lambda \u51fd\u6570\u4e0e reduce \u3002</p> <p>The reduce function is a built-in function from the functools module that takes a function and an iterable as arguments and returns a single value that is the result of applying the function cumulatively to the elements of the iterable. For example, to find the product of all the elements of a list of numbers using a lambda function and reduce, we would write the following code:</p> <p>reduce \u51fd\u6570\u662f functools \u6a21\u5757\u4e2d\u7684\u5185\u7f6e\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u51fd\u6570\u548c\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5355\u4e00\u7684\u503c\uff0c\u8be5\u503c\u662f\u5c06\u51fd\u6570\u7d2f\u79ef\u5e94\u7528\u4e8e\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u5143\u7d20\u7684\u7ed3\u679c\u3002\u4f8b\u5982\uff0c\u4f7f\u7528 lambda \u51fd\u6570\u548c reduce \u67e5\u627e\u6570\u5b57\u5217\u8868\u4e2d\u6240\u6709\u5143\u7d20\u7684\u4e58\u79ef\uff0c\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u4ee5\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>from functools import reduce\n\nnumbers = [1, 2, 3, 4, 5]\nproduct = reduce(lambda x, y: x * y, numbers)\nprint(product) # 120\n</code></pre>"},{"location":"python/function/#limitations-of-lambda-functions-lambda","title":"Limitations of Lambda Functions Lambda","text":"<p>\u51fd\u6570\u7684\u9650\u5236</p> <p>While lambda functions are incredibly useful, they do have a few limitations that are important to keep in mind. One of the main limitations of lambda functions is that they can only contain a single expression. This means that they cannot contain statements or multiple lines of code. Additionally, the expression must be a valid expression in Python and must return a value. Another limitation is that lambda functions cannot contain any annotations or type hints.</p> <p>\u867d\u7136 lambda \u51fd\u6570\u975e\u5e38\u6709\u7528\uff0c\u4f46\u5b83\u4eec\u786e\u5b9e\u6709\u4e00\u4e9b\u9650\u5236\u9700\u8981\u7262\u8bb0\u3002lambda \u51fd\u6570\u7684\u4e3b\u8981\u9650\u5236\u4e4b\u4e00\u662f 1. \u5b83\u4eec\u53ea\u80fd\u5305\u542b\u5355\u4e2a\u8868\u8fbe\u5f0f\u3002\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u4e0d\u80fd\u5305\u542b\u8bed\u53e5\u6216\u591a\u884c\u4ee3\u7801\u3002 2. \u8868\u8fbe\u5f0f\u5fc5\u987b\u662f Python \u4e2d\u7684\u6709\u6548\u8868\u8fbe\u5f0f\uff0c\u5e76\u4e14\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u503c\u3002 3. \u53e6\u4e00\u4e2a\u9650\u5236\u662f lambda \u51fd\u6570\u4e0d\u80fd\u5305\u542b\u4efb\u4f55\u6ce8\u91ca\u6216\u7c7b\u578b\u63d0\u793a\u3002</p>"},{"location":"python/function/#enumerate","title":"Enumerate","text":"<p>Enumerate Medium</p> <pre><code>for i, layer in enumerate(self.layers):\n    x = self.act(layer(x))\n    if i in self.skip:\n        x = torch.cat([x, x_input], dim=-1)\n</code></pre>"}]}